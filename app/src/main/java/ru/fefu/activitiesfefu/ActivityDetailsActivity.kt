package ru.fefu.activitiesfefu

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.MenuItem
import android.view.View
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import ru.fefu.activitiesfefu.data.ActivityDao
import ru.fefu.activitiesfefu.data.ActivityEntity
import ru.fefu.activitiesfefu.data.ActivityType
import ru.fefu.activitiesfefu.databinding.FragmentActivityDetailsBinding
import java.text.SimpleDateFormat
import java.util.Locale

/**
 * –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
class ActivityDetailsActivity : AppCompatActivity() {
    private lateinit var binding: FragmentActivityDetailsBinding
    private lateinit var activityDao: ActivityDao
    private var currentActivityId: Int = -1
    private var isCurrentUserActivity: Boolean = false
    private lateinit var userManager: UserManager
    private var currentComment: String = ""
    private var commentChanged: Boolean = false

    companion object {
        private const val TAG = "ActivityDetailsActivity"
        private const val EXTRA_ACTIVITY_ID = "extra_activity_id"
        private const val EXTRA_DISTANCE = "extra_distance"
        private const val EXTRA_DURATION = "extra_duration"
        private const val EXTRA_TIME_AGO = "extra_time_ago"
        private const val EXTRA_TYPE = "extra_type"
        private const val EXTRA_USERNAME = "extra_username"
        private const val EXTRA_COMMENT = "extra_comment"

        /**
         * –°–æ–∑–¥–∞–µ—Ç Intent –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
         */
        fun createIntent(context: Context, activity: ActivityListItem.Activity): Intent {
            return Intent(context, ActivityDetailsActivity::class.java).apply {
                putExtra(EXTRA_ACTIVITY_ID, activity.id)
                putExtra(EXTRA_DISTANCE, activity.distance)
                putExtra(EXTRA_DURATION, activity.duration)
                putExtra(EXTRA_TIME_AGO, activity.timeAgo)
                putExtra(EXTRA_TYPE, when (activity.type) {
                    ActivityType.BIKE -> "–í–µ–ª–æ—Å–∏–ø–µ–¥ üö¥‚Äç‚ôÇÔ∏è"
                    ActivityType.RUN -> "–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è"
                    ActivityType.STEP -> "–®–∞–≥ üö∂‚Äç‚ôÇÔ∏è"
                })
                activity.username?.let { putExtra(EXTRA_USERNAME, "@$it") }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            binding = FragmentActivityDetailsBinding.inflate(layoutInflater)
            setContentView(binding.root)
            
            // –ü–æ–ª—É—á–∞–µ–º DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            activityDao = (application as ActivityApplication).database.activityDao()
            userManager = UserManager.getInstance(this)
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Toolbar
            setSupportActionBar(binding.toolbar)
            supportActionBar?.setDisplayHomeAsUpEnabled(true)
            supportActionBar?.setDisplayShowHomeEnabled(true)
            
            // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            binding.bottomNavigation.visibility = View.GONE
            
            // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ Intent
            currentActivityId = intent.getIntExtra(EXTRA_ACTIVITY_ID, -1)
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Log.d(TAG, "Loading activity with ID: $currentActivityId")
            
            if (currentActivityId != -1) {
                loadActivityDetails(currentActivityId)
            } else {
                // –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
                setupFromIntent()
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
            binding.detailsShare.setOnClickListener {
                // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            binding.detailsDelete.setOnClickListener {
                showDeleteConfirmationDialog()
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            binding.saveCommentButton.setOnClickListener {
                saveComment()
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            binding.commentEditText.addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
                
                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
                
                override fun afterTextChanged(s: Editable?) {
                    val newComment = s.toString()
                    if (newComment != currentComment) {
                        commentChanged = true
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        showSaveCommentButton()
                    }
                }
            })
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            binding.commentEditText.setOnFocusChangeListener { _, hasFocus ->
                if (!hasFocus && commentChanged) {
                    showSaveCommentDialog()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error in onCreate", e)
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
            setupFromIntent()
        }
    }
    
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ Toolbar
        if (item.itemId == android.R.id.home) {
            // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            if (commentChanged) {
                showSaveCommentDialog()
                return true
            }
            finish() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            return true
        }
        return super.onOptionsItemSelected(item)
    }
    
    override fun onBackPressed() {
        // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if (commentChanged) {
            showSaveCommentDialog()
        } else {
            super.onBackPressed()
        }
    }
    
    private fun loadActivityDetails(activityId: Int) {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val activity = activityDao.getActivityById(activityId)
                withContext(Dispatchers.Main) {
                    if (activity != null) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        isCurrentUserActivity = activity.userId == userManager.getCurrentUserId()
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        binding.detailsDelete.visibility = if (isCurrentUserActivity) View.VISIBLE else View.GONE
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        currentComment = activity.comment
                        binding.commentEditText.setText(activity.comment)
                        
                        // –î–µ–ª–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        binding.commentEditText.isEnabled = isCurrentUserActivity
                        
                        displayActivityDetails(activity)
                    } else {
                        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
                        Log.d(TAG, "Activity not found in database, using intent extras")
                        setupFromIntent()
                    }
                }
            } catch (e: Exception) {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
                Log.e(TAG, "Error loading activity details", e)
                withContext(Dispatchers.Main) {
                    setupFromIntent()
                }
            }
        }
    }
    
    private fun displayActivityDetails(activity: ActivityEntity) {
        try {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            binding.detailsDistance.text = String.format("%.2f –∫–º", activity.distance)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            val hours = activity.durationMillis / (1000 * 60 * 60)
            val minutes = (activity.durationMillis % (1000 * 60 * 60)) / (1000 * 60)
            binding.detailsDuration.text = String.format("%d —á %02d –º–∏–Ω", hours, minutes)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            val now = System.currentTimeMillis()
            val diff = now - activity.startDate.time
            val hoursAgo = diff / (1000 * 60 * 60)
            binding.detailsTimeAgo.text = String.format("%d —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", hoursAgo)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞
            val timeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
            findViewById<TextView>(R.id.start_time)?.text = " ${timeFormat.format(activity.startDate)}"
            findViewById<TextView>(R.id.finish_time)?.text = " ${timeFormat.format(activity.endDate)}"
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            val activityTypeEmoji = when (activity.type) {
                ActivityType.BIKE -> "–í–µ–ª–æ—Å–∏–ø–µ–¥ üö¥‚Äç‚ôÇÔ∏è"
                ActivityType.RUN -> "–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è"
                ActivityType.STEP -> "–®–∞–≥ üö∂‚Äç‚ôÇÔ∏è"
            }
            binding.toolbar.title = activityTypeEmoji
            
            Log.d(TAG, "Activity details displayed successfully")
        } catch (e: Exception) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Intent
            Log.e(TAG, "Error displaying activity details", e)
            setupFromIntent()
        }
    }
    
    private fun setupFromIntent() {
        try {
            intent?.let { intent ->
                binding.detailsDistance.text = intent.getStringExtra(EXTRA_DISTANCE) ?: ""
                binding.detailsDuration.text = intent.getStringExtra(EXTRA_DURATION) ?: ""
                binding.toolbar.title = intent.getStringExtra(EXTRA_TYPE) ?: ""
                binding.detailsTimeAgo.text = intent.getStringExtra(EXTRA_TIME_AGO) ?: ""
                
                // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                intent.getStringExtra(EXTRA_USERNAME)?.let { user ->
                    findViewById<TextView>(R.id.user_text)?.text = user
                    findViewById<TextView>(R.id.user_text)?.visibility = View.VISIBLE
                } ?: run {
                    findViewById<TextView>(R.id.user_text)?.visibility = View.GONE
                }
                
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞
                findViewById<TextView>(R.id.start_time)?.text = " 14:49"
                findViewById<TextView>(R.id.finish_time)?.text = " 16:31"
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                binding.detailsDelete.visibility = View.GONE
                
                // –î–µ–ª–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                binding.commentEditText.isEnabled = false
                
                Log.d(TAG, "Setup from intent completed successfully")
            }
        } catch (e: Exception) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–∑ Intent
            Log.e(TAG, "Error setting up from intent", e)
        }
    }
    
    private fun showDeleteConfirmationDialog() {
        AlertDialog.Builder(this)
            .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?")
            .setPositiveButton("–£–¥–∞–ª–∏—Ç—å") { _, _ ->
                deleteActivity()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun deleteActivity() {
        if (currentActivityId != -1) {
            lifecycleScope.launch(Dispatchers.IO) {
                try {
                    val result = activityDao.deleteActivityById(currentActivityId)
                    withContext(Dispatchers.Main) {
                        if (result > 0) {
                            // –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
                            Toast.makeText(this@ActivityDetailsActivity, "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞", Toast.LENGTH_SHORT).show()
                            finish() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        } else {
                            // –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
                            Toast.makeText(this@ActivityDetailsActivity, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", Toast.LENGTH_SHORT).show()
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Error deleting activity", e)
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@ActivityDetailsActivity, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        } else {
            Toast.makeText(this, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–µ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", Toast.LENGTH_SHORT).show()
        }
    }
    
    private fun showSaveCommentButton() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        binding.saveCommentButton.visibility = View.VISIBLE
    }
    
    private fun showSaveCommentDialog() {
        AlertDialog.Builder(this)
            .setTitle("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            .setMessage("–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")
            .setPositiveButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") { _, _ ->
                saveComment()
            }
            .setNegativeButton("–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å") { _, _ ->
                // –û—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                binding.commentEditText.setText(currentComment)
                commentChanged = false
                finish()
            }
            .show()
    }
    
    private fun saveComment() {
        if (currentActivityId != -1) {
            val newComment = binding.commentEditText.text.toString()
            lifecycleScope.launch(Dispatchers.IO) {
                try {
                    val result = activityDao.updateActivityComment(currentActivityId, newComment)
                    withContext(Dispatchers.Main) {
                        if (result > 0) {
                            // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                            Toast.makeText(this@ActivityDetailsActivity, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω", Toast.LENGTH_SHORT).show()
                            currentComment = newComment
                            commentChanged = false
                            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            binding.saveCommentButton.visibility = View.GONE
                        } else {
                            // –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                            Toast.makeText(this@ActivityDetailsActivity, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", Toast.LENGTH_SHORT).show()
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Error saving comment", e)
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@ActivityDetailsActivity, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        } else {
            Toast.makeText(this, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–µ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", Toast.LENGTH_SHORT).show()
            finish()
        }
    }
} 