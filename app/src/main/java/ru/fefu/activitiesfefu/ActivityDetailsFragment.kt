package ru.fefu.activitiesfefu

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import ru.fefu.activitiesfefu.databinding.FragmentActivityDetailsBinding
import ru.fefu.activitiesfefu.data.ActivityDao
import ru.fefu.activitiesfefu.data.ActivityEntity
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.Locale
import ru.fefu.activitiesfefu.data.ActivityType
import android.util.Log

class ActivityDetailsFragment : Fragment() {
    private var _binding: FragmentActivityDetailsBinding? = null
    private val binding get() = _binding!!
    private lateinit var activityDao: ActivityDao

    companion object {
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        fun newInstance(activity: ActivityListItem.Activity): ActivityDetailsFragment {
            val fragment = ActivityDetailsFragment()
            fragment.arguments = Bundle().apply {
                putInt("activityId", activity.id)
                putString("distance", activity.distance)
                putString("duration", activity.duration)
                putString("timeAgo", activity.timeAgo)
                putString("type", when (activity.type) {
                    ActivityType.BIKE -> "–í–µ–ª–æ—Å–∏–ø–µ–¥ üö¥‚Äç‚ôÇÔ∏è"
                    ActivityType.RUN -> "–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è"
                    ActivityType.STEP -> "–®–∞–≥ üö∂‚Äç‚ôÇÔ∏è"
                })
                activity.username?.let { putString("user", "@$it") }
            }
            return fragment
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentActivityDetailsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        try {
            activityDao = (requireActivity().application as ActivityApplication).database.activityDao()
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            binding.bottomNavigation.setOnItemSelectedListener { item ->
                when (item.itemId) {
                    R.id.nav_activity -> {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º FragmentNavigator –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
                        FragmentNavigator.goBack(parentFragmentManager)
                        true
                    }
                    R.id.nav_profile -> {
                        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è
                        val profileFragment = ProfileFragment()
                        FragmentNavigator.openFragment(parentFragmentManager, profileFragment)
                        true
                    }
                    else -> false
                }
            }
            binding.bottomNavigation.selectedItemId = R.id.nav_activity
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            binding.toolbar.setNavigationOnClickListener {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º FragmentNavigator –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
                FragmentNavigator.goBack(parentFragmentManager)
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            val activityId = arguments?.getInt("activityId", -1) ?: -1
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Log.d("ActivityDetailsFragment", "Loading activity with ID: $activityId")
            
            if (activityId != -1) {
                loadActivityDetails(activityId)
            } else {
                // –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                setupFromArguments()
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
            binding.detailsShare.setOnClickListener {
                // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"
            }
        } catch (e: Exception) {
            Log.e("ActivityDetailsFragment", "Error in onViewCreated", e)
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setupFromArguments()
        }
    }
    
    private fun loadActivityDetails(activityId: Int) {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val activity = activityDao.getActivityById(activityId)
                withContext(Dispatchers.Main) {
                    if (activity != null) {
                        displayActivityDetails(activity)
                    } else {
                        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                        Log.d("ActivityDetailsFragment", "Activity not found in database, using arguments")
                        setupFromArguments()
                    }
                }
            } catch (e: Exception) {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                Log.e("ActivityDetailsFragment", "Error loading activity details", e)
                withContext(Dispatchers.Main) {
                    setupFromArguments()
                }
            }
        }
    }
    
    private fun displayActivityDetails(activity: ActivityEntity) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∞–∫—Ç–∏–≤–∏—Ç–∏
            if (!isAdded) return
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            binding.detailsDistance.text = String.format("%.2f –∫–º", activity.distance)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            val hours = activity.durationMillis / (1000 * 60 * 60)
            val minutes = (activity.durationMillis % (1000 * 60 * 60)) / (1000 * 60)
            binding.detailsDuration.text = String.format("%d —á %02d –º–∏–Ω", hours, minutes)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            val now = System.currentTimeMillis()
            val diff = now - activity.startDate.time
            val hoursAgo = diff / (1000 * 60 * 60)
            binding.detailsTimeAgo.text = String.format("%d —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", hoursAgo)
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞
            val timeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
            view?.findViewById<TextView>(R.id.start_time)?.text = " ${timeFormat.format(activity.startDate)}"
            view?.findViewById<TextView>(R.id.finish_time)?.text = " ${timeFormat.format(activity.endDate)}"
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            val activityTypeEmoji = when (activity.type) {
                ActivityType.BIKE -> "–í–µ–ª–æ—Å–∏–ø–µ–¥ üö¥‚Äç‚ôÇÔ∏è"
                ActivityType.RUN -> "–ë–µ–≥ üèÉ‚Äç‚ôÇÔ∏è"
                ActivityType.STEP -> "–®–∞–≥ üö∂‚Äç‚ôÇÔ∏è"
            }
            binding.toolbar.title = activityTypeEmoji
            
            Log.d("ActivityDetailsFragment", "Activity details displayed successfully")
        } catch (e: Exception) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Log.e("ActivityDetailsFragment", "Error displaying activity details", e)
            setupFromArguments()
        }
    }
    
    private fun setupFromArguments() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∞–∫—Ç–∏–≤–∏—Ç–∏
            if (!isAdded) return
            
            arguments?.let { args ->
                binding.detailsDistance.text = args.getString("distance", "")
                binding.detailsDuration.text = args.getString("duration", "")
                binding.toolbar.title = args.getString("type", "")
                binding.detailsTimeAgo.text = args.getString("timeAgo", "")
                
                // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                args.getString("user")?.let { user ->
                    view?.findViewById<TextView>(R.id.user_text)?.text = user
                    view?.findViewById<TextView>(R.id.user_text)?.visibility = View.VISIBLE
                } ?: run {
                    view?.findViewById<TextView>(R.id.user_text)?.visibility = View.GONE
                }
                
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞
                view?.findViewById<TextView>(R.id.start_time)?.text = " 14:49"
                view?.findViewById<TextView>(R.id.finish_time)?.text = " 16:31"
                
                Log.d("ActivityDetailsFragment", "Setup from arguments completed successfully")
            }
        } catch (e: Exception) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            Log.e("ActivityDetailsFragment", "Error setting up from arguments", e)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
} 